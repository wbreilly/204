trees
update
set.seed(100215)
pop1 <- rnorm(400000, 0, 1)
pop2 <- runif(400000, -5, 5)
pop3 <- rf(400000, 1, 30)
runif??
??
/??
runif ?
??./
??/
? runif
par(mfrow = c(3,1))
par(mfrow = c(3,1))
hist(pop1);hist(pop2);hist(pop3)
pop1m <- lapply(c(1,5,15,30,50), function(x){
unlist(lapply(1:300, function(y){
mean(sample(pop1,x,replace=FALSE),na.rm=TRUE)
}))
})
pop2m <- lapply(c(1,5,15,30,50), function(x){
unlist(lapply(1:300, function(y){
mean(sample(pop2,x,replace=FALSE),na.rm=TRUE)
}))
})
pop3m <- lapply(c(1,5,15,30,50), function(x){
unlist(lapply(1:300, function(y){
mean(sample(pop3,x,replace=FALSE),na.rm=TRUE)
}))
})
names(pop1m) = sampsize
sampsize = c('Sample Size of 1', 'Sample Size of 5',
'Sample Size of 15', 'Sample Size of 30',
'Sample Size of 50')
names(pop1m) = sampsize
names(pop2m) = sampsize
names(pop3m) = sampsize
#We can then plot the sampling distributions of the mean
par(mfrow = c(2,3))
hist(pop1, col = 'gold', main = 'Population 1 Distribution')
lapply(names(pop1m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
hist(pop2, col = 'gold', main = 'Population 2 Distribution')
lapply(names(pop2m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
hist(pop3, col = 'gold', main = 'Population 3 Distribution')
lapply(names(pop3m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
hist(pop1, col = 'gold', main = 'Population 1 Distribution')
lapply(names(pop1m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
hist(pop2, col = 'gold', main = 'Population 2 Distribution')
lapply(names(pop2m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
hist(pop3, col = 'gold', main = 'Population 3 Distribution')
lapply(names(pop3m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
? rf
? sd
b.sd = function(data){
sq.dev = (data - mean(data))^2
n = length(data)
bsd = sqrt((sum(sq.dev))/(n))
#sqrt()
#simply takes the square root of a value
#sum()
#A command to sum a vector of data. Has a na.rm argument like
#the mean() and sd() functions
return(bsd)
}
set.seed(100253)
temp <- rnorm(10,0,1)
temp2 <- rnorm(10,0,1)
b.sd(temp)
b.sd(temp2)
sd(temp)
sd(temp2)
u.sd = function(data){
sq.dev = (data - mean(data))^2
n = length(data)
usd = sqrt((sum(sq.dev))/(n - 1))
return(usd)
}
u.sd(temp)
sd(temp)
u.sd(temp2)
sd(temp2)
pop6 <- rnorm(800000,0,1)
sd(pop6)
b.sd(pop6)
})
pop6u <- lapply(c(5,10,30,100,200,1000), function(x){
unlist(lapply(1:200, function(y){
sd(sample(pop6,x,replace=FALSE))
}))
})
#Same thing as above, but now computing biased SD
pop6b <- lapply(c(5,10,30,100,200,1000), function(x){
unlist(lapply(1:200, function(y){
b.sd(sample(pop6,x,replace=FALSE))
}))
})
pop6um <- unlist(lapply(1:length(pop6u), function(x){
mean(pop6u[[x]])
}))
pop6bm <- unlist(lapply(1:length(pop6b), function(x){
mean(pop6b[[x]])
}))
#Subtracting population parameter from
#unbiased sample estimate
UnbiasedEstimator = pop6um - b.sd(pop6)
BiasedEstimator = pop6bm - b.sd(pop6)
data.frame(UnbiasedEstimator, BiasedEstimator, row.names = c(5, 10, 30, 100, 200, 1000))
clc
clear
par(mfrow==c(1,1))
par(mfrow=c(1,1))
#These are the same populations we were using during the demo
set.seed(100215)
pop1 <- rnorm(400000, 0, 1)
pop2 <- runif(400000, -5, 5)
pop3 <- rf(400000, 1, 30)
mean(pop1)
median(pop1)
max(pop1)
min(pop1)
sd(pop1)
var(pop1)
hist(pop1)
hist(pop2)
hist(pop3)
hist(pop1)
hist(pop2)
hist(pop3)
plot(density(pop1))
plot(density(pop2))
plot(density(pop2))
plot(density(pop3))
hist(pop1, main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 200, col = 'slategray')
hist(pop1, main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 2000, col = 'slategray')
hist(rnorm(25, 0, 1), main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 200, col = 'tomato')
hist(rnorm(25, 0, 1), main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 20, col = 'tomato')
hist(rnorm(25, 0, 1), main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 10, col = 'cyan')
set.seed(10090)
temp <- rnorm(500, 5, 2.3)
hist(temp)
set.seed(10090)
temp <- rnorm(500, 5, 2.3)
hist(temp, col = 'cyan')
temp2 <- (temp-mean(temp))/sd(temp)
hist(temp2)
temp3 <- scale(temp)[,1]
hist(temp3)
tdat <- data.frame(temp,temp2,temp3)
cor(tdat)
gender <- sample(c("male","female"),10,replace=TRUE)
age <- sample(c(21:30),10,replace=TRUE)
nba <- sample(c("Kings"),10,replace=TRUE)
my.data <- data.frame(gender,age,nba)
my.data
depression <- sample(c("depressed","very depressed","despondent"),10,replace=TRUE)
my.data <- cbind(my.data, depression)
my.data
my.data$newvar <- c(1:10)
my.data$newvar = c(1:10)
my.data
my.data$datemin <- (my.data$age / 2) + 7
my.data$datemax <- (my.data$age - 7) * 2
my.data$daterange <- my.data$datemax - my.data$datemin
my.data
set.seed(10913)
v1 <- rnorm(500, 5, 3.3)
v2 <- rnorm(500, 3.3, .5)
v3 <- sample(c(0,1),500, replace = TRUE)
v4 <- sample(c(1,2,2,3,3,3,4,4,4,4,4,5,5,5,6,6,7),500,replace = TRUE)
d <- data.frame(v1,v2,v3,v4)
v1.mn = mn(v1);
v1.mn = mean(v1);
v1.mn = mean(v1)
v1.med = median(v1)
v1.mn = mean(v1)
v1.med = median(v1)
v1.min = min(v1)
v1.max = max(v1)
v2.mn = mean(v2)
v2.med = median(v2)
v2.min = min(v2)
v2.max = max(v2)
hist(v1)
hist(v2)
hist(v3)
hist(v4)
v1.bsd = b.sd(v1)
v1.usd = u.sd(v1)
v2.bsd = b.sd(v2)
v2.usd = u.sd(v2)
v4.bsd = b.sd(v4)
v4.usd = u.sd(v4)
v3 ==0
v3.zero = v3 ==0
summary(v3.zero)
zv1 = (v1-mean(v1))/sd(v1)
hist(zv1)
zv2 = (v2-mean(v2))/sd(v2)
hist(zv2)
scalev1 <- scale(v1)[,1]
hist(scalev1)
scalev2 = scale(v2)[,1]
hist(scalev2)
HW01Data <- read.csv("~/Downloads/HW01Data.csv")
View(HW01Data)
size(HW01Data)
dimnames(HW01Data)
`dim<-`(HW01Data)
dim<-(HW01Data)
dim
? dim
dim(HW01Data)
class(HW01Data)
class(HW01Data, 2)
? class
wd
getwd
save.image("~/walter/204_stats/9.30.16enviro.RData")
load("/Users/WBR/walter/204_stats/9.30.16enviro.RData")
View(HW01Data)
View(HW01Data)
tapply(HW01Data$age_yr, HW01Data$ed_cmplt, HW01Data$biosex, mean)
tapply(HW01Data$age_yr, HW01Data$ed_cmplt, mean)
females = filter(HW01Data$biosex == "FEMALE")
? filter
? dplyr
females = HW01Data[HW01Data$biosex == "FEMALE"]
females = HW01Data[:,HW01Data$biosex == "FEMALE"]
females = subset(HW01Data, HW01Data$biosex == "FEMALE")
View(females)
View(females)
males = subset(HW01Data, HW01Data$biosex == "MALE")
fe.age.ed = tapply(females$age_yr, females$ed_cmplt, mean)
fe.age.ed
ma.age.ed = tapply(males$age_yr, males$ed_cmplt, mean)
ma.age.ed
?table
sex.age.ed = cbind(fe.age.ed,ma.age.ed)
sex.age.ed
table(sex.age.ed)
as.table(sex.age.ed)
> load("/Users/WBR/walter/204_stats/9.30.16enviro.RData")
> View(HW01Data)
> View(HW01Data)
> tapply(HW01Data$age_yr, HW01Data$ed_cmplt, HW01Data$biosex, mean)
Error in match.fun(FUN) :
'HW01Data$biosex' is not a function, character or symbol
>
> tapply(HW01Data$age_yr, HW01Data$ed_cmplt, mean)
College2YR College4YR         HS         MA        PhD
20.01176   23.14118   24.80256   25.10182   29.83784
>
> females = filter(HW01Data$biosex == "FEMALE")
Error in filter(HW01Data$biosex == "FEMALE") :
argument "filter" is missing, with no default
> ? filter
> ? dplyr
No documentation for ‘dplyr’ in specified packages and libraries:
you could try ‘??dplyr’
> females = HW01Data[HW01Data$biosex == "FEMALE"]
Error in `[.data.frame`(HW01Data, HW01Data$biosex == "FEMALE") :
undefined columns selected
> females = HW01Data[:,HW01Data$biosex == "FEMALE"]
Error: unexpected ':' in "females = HW01Data[:"
> females = subset(HW01Data, HW01Data$biosex == "FEMALE")
> View(females)
> View(females)
> males = subset(HW01Data, HW01Data$biosex == "MALE")
> fe.age.ed = tapply(females$age_yr, females$ed_cmplt, mean)
> fe.age.ed
College2YR College4YR         HS         MA        PhD
19.97895   23.08378   25.63333   25.06486   30.01765
> ma.age.ed = tapply(males$age_yr, males$ed_cmplt, mean)
> ma.age.ed
College2YR College4YR         HS         MA        PhD
20.03125   23.29286   24.55333   25.17778   29.68500
> ?table
> sex.age.ed = cbind(fe.age.ed,ma.age.ed)
> sex.age.ed
fe.age.ed ma.age.ed
College2YR  19.97895  20.03125
College4YR  23.08378  23.29286
HS          25.63333  24.55333
MA          25.06486  25.17778
PhD         30.01765  29.68500
> table(sex.age.ed)
sex.age.ed
19.9789473684211         20.03125 23.0837837837838 23.2928571428571 24.5533333333333
1                1                1                1                1
25.0648648648649 25.1777777777778 25.6333333333333           29.685 30.0176470588235
1                1                1                1                1
> as.table(sex.age.ed)
fe.age.ed ma.age.ed
College2YR  19.97895  20.03125
College4YR  23.08378  23.29286
HS          25.63333  24.55333
MA          25.06486  25.17778
PhD         30.01765  29.68500
clc
HW01Data[ , "BMI"] <- HW01Data
HW01Data$BMI = zeros
HW01Data$BMI = 0
view(HW01Data)
View(HW01Data)
View(HW01Data)
? sapply
HW01Data$BMI = sapply(HW01Data, ((HW01Data$weight_lbs / (HW01Data$height_in^2))*703))
View(b.sd)
edit
calc.bmi = function(weight,height)
{
bmi = weight / height^2 * 703
return(bmi)
}
HW01Data$BMI = sapply(HW01Data, calc.bmi(HW01Data$weight_lbs,HW01Data$height_in))
View(HW01Data)
View(HW01Data)
HW01Data$BMI = sapply(HW01Data, calc.bmi(weight_lbs,height_in))
HW01Data$BMI = sapply(HW01Data, calc.bmi,weight_lbs,height_in)
HW01Data$BMI = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs,HW01Data$height_in)
View(HW01Data)
View(HW01Data)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs,HW01Data$height_in)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs,HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs... HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi, weight_lbs, height_in, simplify = F)
temp1 <- round(rnorm(30, 5, 1), 2)
temp2 <- round(rnorm(30, 6, 1), 2)
t.test(temp1, mu = 0)
pval <- unlist(
lapply(seq(0, 10, .01), function(x) {
t.test(temp1, mu = x)$p.value
}))
plot(seq(0, 10, .01),
pval,
ylim = c(0,1),
xlim = c(3,7),
xlab = "Mu Values",
ylab = "P-Values"
)
abline(v = mean(temp1), lty = 3)
t.test(temp1, temp2)
var.test(temp1, temp2)
t.test(temp1, temp2, var.equal = TRUE)
t.test(temp1, temp2)$parameter
t.test(temp1, temp2, var.equal = TRUE)$parameter
mean(temp1);sd(temp1);length(temp1)
set.seed(300)
temp3 <- 3 + .2*temp1 + rnorm(30, 0, 2)
cor(temp1,temp3)
mean(temp3);sd(temp3)
set.seed(300)
temp4 <- -.2 + .9*temp1 + rnorm(30, 0, 1)
cor(temp1,temp4)
mean(temp4);sd(temp4)
cneg <- rep(c(1, 0, 0), each = 20)
cpos <- rep(c(0, 1, 0), each = 20)
set.seed(1023)
score <- 5 + 1.5*cpos + -1.3*cneg + rnorm(60, 0, 2)
score
mean(score)
condition <- rep(c("Negative", "Positive", "Control"), each = 20)
condition
d <- data.frame(score, condition, cneg, cpos)
dim(d)
head(d)
tail(d)
by(d$score, d$condition, mean)
lm(score ~ condition)
aov(score ~ condition)
anova(lm(score ~ condition))
summary(aov(score ~ condition))
rat <- rep(c(1, 0, 0, 0), each = 30)
moth <- rep(c(0, 1, 0, 0), each = 30)
germ <- rep(c(0, 0, 1, 0), each = 30)
stimulus <- rep(c("rat","moth","germ","control"), each = 30)
time <- 60 - 45*rat + -15*moth + -30*germ + rnorm(120, 0, 2)
d2 <- data.frame(time, stimulus, rat, moth, germ)
head(d2)
getwd()
setwd(walter/204_stats)
setwd("walter/204_stats")
ls
whos
?read
HW3D = read.csv("HW03data.csv")
View(HW3D)
View(HW3D)
HW3sum = summary(HW3D)
HW3sum
HW3sum = summarise(HW3D)
library("tidyverse")
HW3sum = summarise(HW3D)
HW3sum
summarise(HW3D, mean, median, var)
rm(HW3sum)
HW3D = read.csv("HW03data.csv")
HW3Dsum = data.frame(HW3D %>%
summarise(davis.means = mean(davis),
davis.medians = median(davis),
davis.variance = var(davis, na.rm = FALSE),
ucla.means = mean(ucla),
ucla.medians = median(ucla),
ucla.variance = var(ucla, na.rm = FALSE),
merced.means = mean(merced),
merced.medians = median(merced),
merced.variance = var(merced, na.rm = FALSE),
))
HW3Dsum = data.frame(HW3D %>%
summarise(davis.means = mean(davis),
davis.medians = median(davis),
davis.variance = var(davis, na.rm = FALSE),
la.means = mean(la),
la.medians = median(la),
la.variance = var(la, na.rm = FALSE),
merced.means = mean(merced),
merced.medians = median(merced),
merced.variance = var(merced, na.rm = FALSE),
))
HW3Dsum = data.frame(HW3D %>%
summarise(davis.means = mean(davis),
davis.medians = median(davis),
davis.variance = var(davis, na.rm = FALSE),
la.means = mean(la),
la.medians = median(la),
la.variance = var(la, na.rm = FALSE),
merced.means = mean(merced),
merced.medians = median(merced),
merced.variance = var(merced, na.rm = FALSE)
))
View(HW3Dsum)
View(HW3Dsum)
HW1 = read.csv("HW01.csv")
HW1 = read.csv("HW01Data.csv")
View(HW1)
View(HW1)
