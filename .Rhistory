b.sd(pop6)
})
pop6u <- lapply(c(5,10,30,100,200,1000), function(x){
unlist(lapply(1:200, function(y){
sd(sample(pop6,x,replace=FALSE))
}))
})
#Same thing as above, but now computing biased SD
pop6b <- lapply(c(5,10,30,100,200,1000), function(x){
unlist(lapply(1:200, function(y){
b.sd(sample(pop6,x,replace=FALSE))
}))
})
pop6um <- unlist(lapply(1:length(pop6u), function(x){
mean(pop6u[[x]])
}))
pop6bm <- unlist(lapply(1:length(pop6b), function(x){
mean(pop6b[[x]])
}))
#Subtracting population parameter from
#unbiased sample estimate
UnbiasedEstimator = pop6um - b.sd(pop6)
BiasedEstimator = pop6bm - b.sd(pop6)
data.frame(UnbiasedEstimator, BiasedEstimator, row.names = c(5, 10, 30, 100, 200, 1000))
clc
clear
par(mfrow==c(1,1))
par(mfrow=c(1,1))
#These are the same populations we were using during the demo
set.seed(100215)
pop1 <- rnorm(400000, 0, 1)
pop2 <- runif(400000, -5, 5)
pop3 <- rf(400000, 1, 30)
mean(pop1)
median(pop1)
max(pop1)
min(pop1)
sd(pop1)
var(pop1)
hist(pop1)
hist(pop2)
hist(pop3)
hist(pop1)
hist(pop2)
hist(pop3)
plot(density(pop1))
plot(density(pop2))
plot(density(pop2))
plot(density(pop3))
hist(pop1, main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 200, col = 'slategray')
hist(pop1, main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 2000, col = 'slategray')
hist(rnorm(25, 0, 1), main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 200, col = 'tomato')
hist(rnorm(25, 0, 1), main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 20, col = 'tomato')
hist(rnorm(25, 0, 1), main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 10, col = 'cyan')
set.seed(10090)
temp <- rnorm(500, 5, 2.3)
hist(temp)
set.seed(10090)
temp <- rnorm(500, 5, 2.3)
hist(temp, col = 'cyan')
temp2 <- (temp-mean(temp))/sd(temp)
hist(temp2)
temp3 <- scale(temp)[,1]
hist(temp3)
tdat <- data.frame(temp,temp2,temp3)
cor(tdat)
gender <- sample(c("male","female"),10,replace=TRUE)
age <- sample(c(21:30),10,replace=TRUE)
nba <- sample(c("Kings"),10,replace=TRUE)
my.data <- data.frame(gender,age,nba)
my.data
depression <- sample(c("depressed","very depressed","despondent"),10,replace=TRUE)
my.data <- cbind(my.data, depression)
my.data
my.data$newvar <- c(1:10)
my.data$newvar = c(1:10)
my.data
my.data$datemin <- (my.data$age / 2) + 7
my.data$datemax <- (my.data$age - 7) * 2
my.data$daterange <- my.data$datemax - my.data$datemin
my.data
set.seed(10913)
v1 <- rnorm(500, 5, 3.3)
v2 <- rnorm(500, 3.3, .5)
v3 <- sample(c(0,1),500, replace = TRUE)
v4 <- sample(c(1,2,2,3,3,3,4,4,4,4,4,5,5,5,6,6,7),500,replace = TRUE)
d <- data.frame(v1,v2,v3,v4)
v1.mn = mn(v1);
v1.mn = mean(v1);
v1.mn = mean(v1)
v1.med = median(v1)
v1.mn = mean(v1)
v1.med = median(v1)
v1.min = min(v1)
v1.max = max(v1)
v2.mn = mean(v2)
v2.med = median(v2)
v2.min = min(v2)
v2.max = max(v2)
hist(v1)
hist(v2)
hist(v3)
hist(v4)
v1.bsd = b.sd(v1)
v1.usd = u.sd(v1)
v2.bsd = b.sd(v2)
v2.usd = u.sd(v2)
v4.bsd = b.sd(v4)
v4.usd = u.sd(v4)
v3 ==0
v3.zero = v3 ==0
summary(v3.zero)
zv1 = (v1-mean(v1))/sd(v1)
hist(zv1)
zv2 = (v2-mean(v2))/sd(v2)
hist(zv2)
scalev1 <- scale(v1)[,1]
hist(scalev1)
scalev2 = scale(v2)[,1]
hist(scalev2)
HW01Data <- read.csv("~/Downloads/HW01Data.csv")
View(HW01Data)
size(HW01Data)
dimnames(HW01Data)
`dim<-`(HW01Data)
dim<-(HW01Data)
dim
? dim
dim(HW01Data)
class(HW01Data)
class(HW01Data, 2)
? class
wd
getwd
save.image("~/walter/204_stats/9.30.16enviro.RData")
load("/Users/WBR/walter/204_stats/9.30.16enviro.RData")
View(HW01Data)
View(HW01Data)
tapply(HW01Data$age_yr, HW01Data$ed_cmplt, HW01Data$biosex, mean)
tapply(HW01Data$age_yr, HW01Data$ed_cmplt, mean)
females = filter(HW01Data$biosex == "FEMALE")
? filter
? dplyr
females = HW01Data[HW01Data$biosex == "FEMALE"]
females = HW01Data[:,HW01Data$biosex == "FEMALE"]
females = subset(HW01Data, HW01Data$biosex == "FEMALE")
View(females)
View(females)
males = subset(HW01Data, HW01Data$biosex == "MALE")
fe.age.ed = tapply(females$age_yr, females$ed_cmplt, mean)
fe.age.ed
ma.age.ed = tapply(males$age_yr, males$ed_cmplt, mean)
ma.age.ed
?table
sex.age.ed = cbind(fe.age.ed,ma.age.ed)
sex.age.ed
table(sex.age.ed)
as.table(sex.age.ed)
> load("/Users/WBR/walter/204_stats/9.30.16enviro.RData")
> View(HW01Data)
> View(HW01Data)
> tapply(HW01Data$age_yr, HW01Data$ed_cmplt, HW01Data$biosex, mean)
Error in match.fun(FUN) :
'HW01Data$biosex' is not a function, character or symbol
>
> tapply(HW01Data$age_yr, HW01Data$ed_cmplt, mean)
College2YR College4YR         HS         MA        PhD
20.01176   23.14118   24.80256   25.10182   29.83784
>
> females = filter(HW01Data$biosex == "FEMALE")
Error in filter(HW01Data$biosex == "FEMALE") :
argument "filter" is missing, with no default
> ? filter
> ? dplyr
No documentation for ‘dplyr’ in specified packages and libraries:
you could try ‘??dplyr’
> females = HW01Data[HW01Data$biosex == "FEMALE"]
Error in `[.data.frame`(HW01Data, HW01Data$biosex == "FEMALE") :
undefined columns selected
> females = HW01Data[:,HW01Data$biosex == "FEMALE"]
Error: unexpected ':' in "females = HW01Data[:"
> females = subset(HW01Data, HW01Data$biosex == "FEMALE")
> View(females)
> View(females)
> males = subset(HW01Data, HW01Data$biosex == "MALE")
> fe.age.ed = tapply(females$age_yr, females$ed_cmplt, mean)
> fe.age.ed
College2YR College4YR         HS         MA        PhD
19.97895   23.08378   25.63333   25.06486   30.01765
> ma.age.ed = tapply(males$age_yr, males$ed_cmplt, mean)
> ma.age.ed
College2YR College4YR         HS         MA        PhD
20.03125   23.29286   24.55333   25.17778   29.68500
> ?table
> sex.age.ed = cbind(fe.age.ed,ma.age.ed)
> sex.age.ed
fe.age.ed ma.age.ed
College2YR  19.97895  20.03125
College4YR  23.08378  23.29286
HS          25.63333  24.55333
MA          25.06486  25.17778
PhD         30.01765  29.68500
> table(sex.age.ed)
sex.age.ed
19.9789473684211         20.03125 23.0837837837838 23.2928571428571 24.5533333333333
1                1                1                1                1
25.0648648648649 25.1777777777778 25.6333333333333           29.685 30.0176470588235
1                1                1                1                1
> as.table(sex.age.ed)
fe.age.ed ma.age.ed
College2YR  19.97895  20.03125
College4YR  23.08378  23.29286
HS          25.63333  24.55333
MA          25.06486  25.17778
PhD         30.01765  29.68500
clc
HW01Data[ , "BMI"] <- HW01Data
HW01Data$BMI = zeros
HW01Data$BMI = 0
view(HW01Data)
View(HW01Data)
View(HW01Data)
? sapply
HW01Data$BMI = sapply(HW01Data, ((HW01Data$weight_lbs / (HW01Data$height_in^2))*703))
View(b.sd)
edit
calc.bmi = function(weight,height)
{
bmi = weight / height^2 * 703
return(bmi)
}
HW01Data$BMI = sapply(HW01Data, calc.bmi(HW01Data$weight_lbs,HW01Data$height_in))
View(HW01Data)
View(HW01Data)
HW01Data$BMI = sapply(HW01Data, calc.bmi(weight_lbs,height_in))
HW01Data$BMI = sapply(HW01Data, calc.bmi,weight_lbs,height_in)
HW01Data$BMI = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs,HW01Data$height_in)
View(HW01Data)
View(HW01Data)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs,HW01Data$height_in)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs,HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs... HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi, weight_lbs, height_in, simplify = F)
# Walter Reilly
# 10_12_16
# HW 2 for stats 204A
# set wd
setwd("walter/204")
# load ggplot
library("ggplot2")
#load ggplot
library("tidyverse")
# load data
HWD <- read.csv("~/walter/204/HW01Data.csv")
# 5a. Create a histogram of weight
qplot(HWD$weight_lbs, geom="histogram", binwidth = 1, main = "Hist of Weight" , xlab = "Weight(lbs)" )
# 5b
# plot the density
dplot = qplot(HWD$height_in, geom="density",  main = "Density of Height" , xlab = "Height(Inches)" )
# plot verticle line at mean height
dplot + geom_vline(xintercept = mean(HWD$height_in))
setwd("walter/204_stats")
HWD <- read.csv("~/walter/204_stats/HW01Data.csv")
qplot(HWD$weight_lbs, geom="histogram", binwidth = 1, main = "Hist of Weight" , xlab = "Weight(lbs)" )
dplot = qplot(HWD$height_in, geom="density",  main = "Density of Height" , xlab = "Height(Inches)" )
dplot = qplot(HWD$height_in, geom="density",  main = "Density of Height" , xlab = "Height(Inches)")
dplot + geom_vline(xintercept = mean(HWD$height_in))
qplot(HWD$weight_lbs, geom="histogram", binwidth = 1, main = "Hist of Weight" ,
xlab = "Weight(lbs)" )
dplot = qplot(HWD$height_in, geom="density",  main = "Density of Height" ,
xlab = "Height(Inches)")
# plot verticle line at mean height
dplot + geom_vline(xintercept = mean(HWD$height_in))
calc.bmi = function(weight_lbs, height_ins)
{
bmi = weight_lbs / height_ins^2 * 703
return(bmi)
}
# add BMI column
HWD = HWD %>%
mutate(BMI = weight_lbs / height_in^2 * 703)
# load ggplot
library("ggplot2")
#load ggplot
library("tidyverse")
?summarise
# group biosex and ed
HW01Data %>%
group_by(biosex, ed_cmplt) %>%
summarise()
HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise()
?summary
HWD %>%
group_by(biosex, ed_cmplt) %>%
summary()
HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(mean,median,variance,minimum,maximum)
HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(mean)
HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(bmi.means = mean(BMI))
HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI)
)
?var
HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max
)
# group biosex and ed
HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
)
?tb
?table
HWD %>%
group_by(biosex, ed_cmplt) %>%
table(summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
))
HWD %>%
group_by(biosex, ed_cmplt) %>%
as.table(summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
))
HWD %>%
group_by(biosex, ed_cmplt) %>%
as.data.frame(summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
))
?data.tablw
?data.tablw\e
?data.table
HWD %>%
group_by(biosex, ed_cmplt) %>%
table.6 = summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
)
HWD %>%
group_by(biosex, ed_cmplt) %>%
table.6 -> summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
)
HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
) %>%
as.tab(HWD)
HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
) %>%
as.table(HWD)
HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
)
HWD %>%
group_by(biosex, ed_cmplt) %>%
my.table -> table(summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
))
as.table() -> HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
)
HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
)
my.table =as.table(HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
))
my.table = data.frame(HWD %>%
group_by(biosex, ed_cmplt) %>%
summarise(bmi.means = mean(BMI),
bmi.medians = median(BMI),
bmi.variance = var(BMI, na.rm = FALSE),
bmi.max = max(BMI),
bmi.min = min(BMI)
))
View(my.table)
View(my.table)
my.table = as.table(my.table)
test = write.table(my.table)
ungroup(HWD)
ungroup(HWD);
source('~/walter/204_stats/WBR_HW2_10_12_16.R')
source('~/walter/204_stats/WBR_HW2_10_12_16.R')
select(HWD,max(HWD$BMI)
)
select(HWD,max(HWD$BMI))
filter(HWD,max(HWD$BMI))
maxrow = arrange(HWD,max(HWD$BMI))
HWD,max(HWD$BMI)
max(HWD$BMI)
HWD[,max(HWD$BMI))
HWD[,max(HWD$BMI)]
?find
max.bmi = max(HWD$BMI)
find(max.bmi,where)
HWD[HWD$BMI == max.bmi, ]
min.bmi = min(HWD$BMI)
HWD[HWD$BMI == min.bmi, ]
mutate(HWD, z.BMI = scale(HWD$BMI))
HWD = mutate(HWD, z.BMI = scale(HWD$BMI))
max.Zbmi = max(HWD$z.BMI)
HWD[HWD$z.BMI == max.Zbmi, ]
min.Zbmi = min(HWD$z.BMI)
HWD[HWD$z.BMI == min.Zbmi, ]
HWD = mutate(HWD, rescale.BMI = HWD$z.BMI*15 + 100)
HWD$z.BMI*15
HWD = mutate(HWD, rescale.BMI = HWD$z.BMI*15 + 100)
HWD = mutate(HWD, rescale.BMI = (HWD$z.BMI*15 + 100))
HWD = mutate(HWD, rescale.BMI = HWD$z.BMI*15)
HWD = mutate(HWD, rescale.BMI = $z.BMI*15)
HWD = mutate(HWD, rescale.BMI = z.BMI*15)
HWD = mutate(HWD, rescale.BMI = sapply(z.BMI*15+100))
HWD[,rescale.BMI] = sapply(HWD$z.BMI*15+100)
HWD[,rescale.BMI] = tapply(HWD$z.BMI*15+100)
HWD[,rescale.BMI] = apply(HWD$z.BMI*15+100)
scales = HWD[,z.BMI]
scales = HWD[,HWD$z.BMI]
HWD = mutate(HWD, rescale.BMI = HWD$z.BMI*15+100)
sapply(HWD, class)
HWD = data.frame(HWD)
sapply(HWD, class)
HWD[,z.BMI] = as.numeric(HWD$z.BMI)
as.numeric(HWD$z.BMI)
HWD = mutate(HWD, z.BMI = as.numeric(scale(HWD$BMI))
)
HWD = mutate(HWD, z.BMI = as.numeric(scale(HWD$BMI)))
HWD = mutate(HWD, nums = as.numeric(HWD$z.BMI))
HWD[,z.BMI]
View(HWD)
View(HWD)
HWD = mutate(HWD, rescale.BMI = HWD[,7]*15+100)
plz = as.numeric(HWD[,7])
HWD = mutate(HWD, rescale.BMI = num.z*15+100)
HWD = mutate(HWD, rescale.BMI = num.z.*15.+100)
HWD = mutate(HWD, rescale.BMI = z.BMI%*%15%+%100)
HWD = mutate(HWD, rescale.BMI = (z.BMI*15)+100)
HWD = mutate(HWD, rescale.BMI = (HWD$z.BMI*15)+100)
HWD[,7] = drop(HWD$z.BMI)
HWD = mutate(HWD, rescale.BMI = (HWD$z.BMI*15)+100)
HWD[HWD$rescale.BMI == max(HWD$rescale.BMI), ]
HWD[HWD$rescale.BMI == min(HWD$rescale.BMI), ]
