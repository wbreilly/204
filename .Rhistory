trees
update
set.seed(100215)
pop1 <- rnorm(400000, 0, 1)
pop2 <- runif(400000, -5, 5)
pop3 <- rf(400000, 1, 30)
runif??
??
/??
runif ?
??./
??/
? runif
par(mfrow = c(3,1))
par(mfrow = c(3,1))
hist(pop1);hist(pop2);hist(pop3)
pop1m <- lapply(c(1,5,15,30,50), function(x){
unlist(lapply(1:300, function(y){
mean(sample(pop1,x,replace=FALSE),na.rm=TRUE)
}))
})
pop2m <- lapply(c(1,5,15,30,50), function(x){
unlist(lapply(1:300, function(y){
mean(sample(pop2,x,replace=FALSE),na.rm=TRUE)
}))
})
pop3m <- lapply(c(1,5,15,30,50), function(x){
unlist(lapply(1:300, function(y){
mean(sample(pop3,x,replace=FALSE),na.rm=TRUE)
}))
})
names(pop1m) = sampsize
sampsize = c('Sample Size of 1', 'Sample Size of 5',
'Sample Size of 15', 'Sample Size of 30',
'Sample Size of 50')
names(pop1m) = sampsize
names(pop2m) = sampsize
names(pop3m) = sampsize
#We can then plot the sampling distributions of the mean
par(mfrow = c(2,3))
hist(pop1, col = 'gold', main = 'Population 1 Distribution')
lapply(names(pop1m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
hist(pop2, col = 'gold', main = 'Population 2 Distribution')
lapply(names(pop2m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
hist(pop3, col = 'gold', main = 'Population 3 Distribution')
lapply(names(pop3m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
hist(pop1, col = 'gold', main = 'Population 1 Distribution')
lapply(names(pop1m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
hist(pop2, col = 'gold', main = 'Population 2 Distribution')
lapply(names(pop2m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
hist(pop3, col = 'gold', main = 'Population 3 Distribution')
lapply(names(pop3m), function(x){
hist(pop1m[[x]], col = 'darkgreen',
main = x, xlab = '', xlim = c(-4, 4))
})
? rf
? sd
b.sd = function(data){
sq.dev = (data - mean(data))^2
n = length(data)
bsd = sqrt((sum(sq.dev))/(n))
#sqrt()
#simply takes the square root of a value
#sum()
#A command to sum a vector of data. Has a na.rm argument like
#the mean() and sd() functions
return(bsd)
}
set.seed(100253)
temp <- rnorm(10,0,1)
temp2 <- rnorm(10,0,1)
b.sd(temp)
b.sd(temp2)
sd(temp)
sd(temp2)
u.sd = function(data){
sq.dev = (data - mean(data))^2
n = length(data)
usd = sqrt((sum(sq.dev))/(n - 1))
return(usd)
}
u.sd(temp)
sd(temp)
u.sd(temp2)
sd(temp2)
pop6 <- rnorm(800000,0,1)
sd(pop6)
b.sd(pop6)
})
pop6u <- lapply(c(5,10,30,100,200,1000), function(x){
unlist(lapply(1:200, function(y){
sd(sample(pop6,x,replace=FALSE))
}))
})
#Same thing as above, but now computing biased SD
pop6b <- lapply(c(5,10,30,100,200,1000), function(x){
unlist(lapply(1:200, function(y){
b.sd(sample(pop6,x,replace=FALSE))
}))
})
pop6um <- unlist(lapply(1:length(pop6u), function(x){
mean(pop6u[[x]])
}))
pop6bm <- unlist(lapply(1:length(pop6b), function(x){
mean(pop6b[[x]])
}))
#Subtracting population parameter from
#unbiased sample estimate
UnbiasedEstimator = pop6um - b.sd(pop6)
BiasedEstimator = pop6bm - b.sd(pop6)
data.frame(UnbiasedEstimator, BiasedEstimator, row.names = c(5, 10, 30, 100, 200, 1000))
clc
clear
par(mfrow==c(1,1))
par(mfrow=c(1,1))
#These are the same populations we were using during the demo
set.seed(100215)
pop1 <- rnorm(400000, 0, 1)
pop2 <- runif(400000, -5, 5)
pop3 <- rf(400000, 1, 30)
mean(pop1)
median(pop1)
max(pop1)
min(pop1)
sd(pop1)
var(pop1)
hist(pop1)
hist(pop2)
hist(pop3)
hist(pop1)
hist(pop2)
hist(pop3)
plot(density(pop1))
plot(density(pop2))
plot(density(pop2))
plot(density(pop3))
hist(pop1, main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 200, col = 'slategray')
hist(pop1, main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 2000, col = 'slategray')
hist(rnorm(25, 0, 1), main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 200, col = 'tomato')
hist(rnorm(25, 0, 1), main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 20, col = 'tomato')
hist(rnorm(25, 0, 1), main = "Histogram of Standard Normal Pop",
xlab = "Values", xlim = c(-2, 2), breaks = 10, col = 'cyan')
set.seed(10090)
temp <- rnorm(500, 5, 2.3)
hist(temp)
set.seed(10090)
temp <- rnorm(500, 5, 2.3)
hist(temp, col = 'cyan')
temp2 <- (temp-mean(temp))/sd(temp)
hist(temp2)
temp3 <- scale(temp)[,1]
hist(temp3)
tdat <- data.frame(temp,temp2,temp3)
cor(tdat)
gender <- sample(c("male","female"),10,replace=TRUE)
age <- sample(c(21:30),10,replace=TRUE)
nba <- sample(c("Kings"),10,replace=TRUE)
my.data <- data.frame(gender,age,nba)
my.data
depression <- sample(c("depressed","very depressed","despondent"),10,replace=TRUE)
my.data <- cbind(my.data, depression)
my.data
my.data$newvar <- c(1:10)
my.data$newvar = c(1:10)
my.data
my.data$datemin <- (my.data$age / 2) + 7
my.data$datemax <- (my.data$age - 7) * 2
my.data$daterange <- my.data$datemax - my.data$datemin
my.data
set.seed(10913)
v1 <- rnorm(500, 5, 3.3)
v2 <- rnorm(500, 3.3, .5)
v3 <- sample(c(0,1),500, replace = TRUE)
v4 <- sample(c(1,2,2,3,3,3,4,4,4,4,4,5,5,5,6,6,7),500,replace = TRUE)
d <- data.frame(v1,v2,v3,v4)
v1.mn = mn(v1);
v1.mn = mean(v1);
v1.mn = mean(v1)
v1.med = median(v1)
v1.mn = mean(v1)
v1.med = median(v1)
v1.min = min(v1)
v1.max = max(v1)
v2.mn = mean(v2)
v2.med = median(v2)
v2.min = min(v2)
v2.max = max(v2)
hist(v1)
hist(v2)
hist(v3)
hist(v4)
v1.bsd = b.sd(v1)
v1.usd = u.sd(v1)
v2.bsd = b.sd(v2)
v2.usd = u.sd(v2)
v4.bsd = b.sd(v4)
v4.usd = u.sd(v4)
v3 ==0
v3.zero = v3 ==0
summary(v3.zero)
zv1 = (v1-mean(v1))/sd(v1)
hist(zv1)
zv2 = (v2-mean(v2))/sd(v2)
hist(zv2)
scalev1 <- scale(v1)[,1]
hist(scalev1)
scalev2 = scale(v2)[,1]
hist(scalev2)
HW01Data <- read.csv("~/Downloads/HW01Data.csv")
View(HW01Data)
size(HW01Data)
dimnames(HW01Data)
`dim<-`(HW01Data)
dim<-(HW01Data)
dim
? dim
dim(HW01Data)
class(HW01Data)
class(HW01Data, 2)
? class
wd
getwd
save.image("~/walter/204_stats/9.30.16enviro.RData")
load("/Users/WBR/walter/204_stats/9.30.16enviro.RData")
View(HW01Data)
View(HW01Data)
tapply(HW01Data$age_yr, HW01Data$ed_cmplt, HW01Data$biosex, mean)
tapply(HW01Data$age_yr, HW01Data$ed_cmplt, mean)
females = filter(HW01Data$biosex == "FEMALE")
? filter
? dplyr
females = HW01Data[HW01Data$biosex == "FEMALE"]
females = HW01Data[:,HW01Data$biosex == "FEMALE"]
females = subset(HW01Data, HW01Data$biosex == "FEMALE")
View(females)
View(females)
males = subset(HW01Data, HW01Data$biosex == "MALE")
fe.age.ed = tapply(females$age_yr, females$ed_cmplt, mean)
fe.age.ed
ma.age.ed = tapply(males$age_yr, males$ed_cmplt, mean)
ma.age.ed
?table
sex.age.ed = cbind(fe.age.ed,ma.age.ed)
sex.age.ed
table(sex.age.ed)
as.table(sex.age.ed)
> load("/Users/WBR/walter/204_stats/9.30.16enviro.RData")
> View(HW01Data)
> View(HW01Data)
> tapply(HW01Data$age_yr, HW01Data$ed_cmplt, HW01Data$biosex, mean)
Error in match.fun(FUN) :
'HW01Data$biosex' is not a function, character or symbol
>
> tapply(HW01Data$age_yr, HW01Data$ed_cmplt, mean)
College2YR College4YR         HS         MA        PhD
20.01176   23.14118   24.80256   25.10182   29.83784
>
> females = filter(HW01Data$biosex == "FEMALE")
Error in filter(HW01Data$biosex == "FEMALE") :
argument "filter" is missing, with no default
> ? filter
> ? dplyr
No documentation for ‘dplyr’ in specified packages and libraries:
you could try ‘??dplyr’
> females = HW01Data[HW01Data$biosex == "FEMALE"]
Error in `[.data.frame`(HW01Data, HW01Data$biosex == "FEMALE") :
undefined columns selected
> females = HW01Data[:,HW01Data$biosex == "FEMALE"]
Error: unexpected ':' in "females = HW01Data[:"
> females = subset(HW01Data, HW01Data$biosex == "FEMALE")
> View(females)
> View(females)
> males = subset(HW01Data, HW01Data$biosex == "MALE")
> fe.age.ed = tapply(females$age_yr, females$ed_cmplt, mean)
> fe.age.ed
College2YR College4YR         HS         MA        PhD
19.97895   23.08378   25.63333   25.06486   30.01765
> ma.age.ed = tapply(males$age_yr, males$ed_cmplt, mean)
> ma.age.ed
College2YR College4YR         HS         MA        PhD
20.03125   23.29286   24.55333   25.17778   29.68500
> ?table
> sex.age.ed = cbind(fe.age.ed,ma.age.ed)
> sex.age.ed
fe.age.ed ma.age.ed
College2YR  19.97895  20.03125
College4YR  23.08378  23.29286
HS          25.63333  24.55333
MA          25.06486  25.17778
PhD         30.01765  29.68500
> table(sex.age.ed)
sex.age.ed
19.9789473684211         20.03125 23.0837837837838 23.2928571428571 24.5533333333333
1                1                1                1                1
25.0648648648649 25.1777777777778 25.6333333333333           29.685 30.0176470588235
1                1                1                1                1
> as.table(sex.age.ed)
fe.age.ed ma.age.ed
College2YR  19.97895  20.03125
College4YR  23.08378  23.29286
HS          25.63333  24.55333
MA          25.06486  25.17778
PhD         30.01765  29.68500
clc
HW01Data[ , "BMI"] <- HW01Data
HW01Data$BMI = zeros
HW01Data$BMI = 0
view(HW01Data)
View(HW01Data)
View(HW01Data)
? sapply
HW01Data$BMI = sapply(HW01Data, ((HW01Data$weight_lbs / (HW01Data$height_in^2))*703))
View(b.sd)
edit
calc.bmi = function(weight,height)
{
bmi = weight / height^2 * 703
return(bmi)
}
HW01Data$BMI = sapply(HW01Data, calc.bmi(HW01Data$weight_lbs,HW01Data$height_in))
View(HW01Data)
View(HW01Data)
HW01Data$BMI = sapply(HW01Data, calc.bmi(weight_lbs,height_in))
HW01Data$BMI = sapply(HW01Data, calc.bmi,weight_lbs,height_in)
HW01Data$BMI = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs,HW01Data$height_in)
View(HW01Data)
View(HW01Data)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs,HW01Data$height_in)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs,HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi,HW01Data$weight_lbs... HW01Data$height_in, simplify = F)
HW01Data[,"BMI"]  = sapply(HW01Data, calc.bmi, weight_lbs, height_in, simplify = F)
clear all
clear
?clear
rm()
?rm
rm(list=ls)
closeAllConnections()
set.seed(2)
happiness <- rnorm(100, 0, 1)
sex <- sample(c("male", "female"), 100, replace=TRUE)
marital <- sample(c("single", "married", "divorced"), 100, replace=TRUE)
d <- data.frame(happiness, sex, marital)
View(d)
View(d)
head(d)
by(d$happiness, list(d$sex, d$marital), mean)
by(d$happiness, list(d$sex, d$marital), median)
plot(density(d$happiness), xlab = "Level of Happiness",
main = "Density Distribution of Happiness")
abline(v = mean(d$happiness))
abline(h = .25)
points(c(4, -1), c(.2, .3), pch = 'O')
points(c(4, 1), c(.2, .3), pch = 'O')
col = 'red')
lines(c(0,2),c(.15,.2), col = 'red')
lines(c(-2,2),c(.2,.2), col = 'red')
lines(c(-2, 0),c(.2, .15), col = 'red')
temp <- sample(1:100, 15)
temp
length(temp)
length(temp-1)
(length(temp)-1)
?c
x<-c(1,2,3,4,5)
mean(x)
sd(x)
y<-x*(15/sd(x))
y
ymean(y)
mean(y)
sd(y)
y<-y+(100-mean(y))
mean(y)
sd(y)
x
x2<-scale(x)
mean(x2)
sd(x2)
y2<-x2*15
mean(y2)
sd(y2)
y2<-y2+100
mean(y2)
sd(y2)
pnorm(1.96, 0, 1)
pnorm(-1.96, 0, 1)
plot(density(rnorm(100000, 0, 1)))
lines(density(rt(10, 14)), col = 'red')
lines(density(rt(10, 10)), col = 'red')
plot(density(rnorm(100000, 0, 1)))
lines(density(rt(100000, 14)), col = 'red')
abline(v=c(-1.96,1.96))
pt(1.9, 14, lower.tail = FALSE)
pt(-1.9, 14, lower.tail = TRUE)
pt(1.9, 49, lower.tail = FALSE)
pt(-1.9, 49, lower.tail = TRUE)
pt(1.9, 99, lower.tail = FALSE)
pt(-1.9, 99, lower.tail = TRUE)
qt(.025, 4, lower.tail = TRUE)
qt(.025, 4, lower.tail = FALSE)
qt(.025, 4, lower.tail = TRUE)
qt(.025, 4, lower.tail = FALSE)
qt(.025, 14, lower.tail = TRUE)
qt(.025, 14, lower.tail = FALSE)
qt(.025, 29, lower.tail = TRUE)
qt(.025, 29, lower.tail = FALSE)
par(mfrow = c(2, 2))
hist(rnorm(1000, 0, 1), xlim = c(-7, 7))
hist(rt(1000, df = 4), xlim = c(-7, 7))
hist(rt(1000, df = 14), xlim = c(-7, 7))
hist(rt(1000, df = 29), xlim = c(-7, 7))
sd(rnorm(1000, 0, 1))
sd(rt(1000, df = 4))
sd(rt(1000, df = 14))
sd(rt(1000, df = 29))
pop1z <- (82-100)/(15/sqrt(15))
pop1z
.025 > pnorm(pop1z, lower.tail = TRUE)
#Two-tailed, alpha = .05
.005 > pnorm(pop1z, lower.tail = TRUE)
pop2z <- (96-100)/(15/sqrt(10))
pop2z
.025 > pnorm(pop2z, lower.tail = TRUE)
#Two-tailed, alpha = .05
.005 > pnorm(pop2z, lower.tail = TRUE)
#Two-tailed, alpha = .01
pop3z <- (110-100)/(15/sqrt(11))
pop3z
.025 > pnorm(pop3z, lower.tail = FALSE)
#Two-tailed, alpha = .05
.005 > pnorm(pop3z, lower.tail = FALSE)
#Two-tailed, alpha = .01
pop3z <- (110-100)/(15/sqrt(11))
pop3z
.025 > pnorm(pop3z, lower.tail = FALSE)
#Two-tailed, alpha = .05
.005 > pnorm(pop3z, lower.tail = FALSE)
#Two-tailed, alpha = .01
critz <- qnorm(.025, 0, 1, lower.tail = FALSE)
sepop1 <- 15/sqrt(15)
sepop2 <- 15/sqrt(10)
sepop3 <- 15/sqrt(11)
c((82 - sepop1*critz),(82 + sepop1*critz))
(15/sqrt(15))
c((96 - sepop2*critz),(96 + sepop2*critz))
c((110 - sepop3*critz),(110 + sepop3*critz))
table(by(d$happiness, list(d$sex, d$marital), median))
load(HW01Data.csv)
load("HW01Data.csv")
`HW01Data.(1)` <- read.csv("~/Downloads/HW01Data (1).csv")
View(`HW01Data.(1)`)
HwD = `HW01Data.(1)`
HWD = data.frame(HwD)
rm("HwData.(1)")
rm("HwData01.(1)")
rm(HwData01.(1))
rm("HwData01.(1))
""
"
View(`HW01Data.(1)`)
View(`HW01Data.(1)`)
rm(`HW01Data.(1)`)
View(HWD)
HWD <- read.csv("~/Downloads/HWD.csv")
View(HWD)
class("HWD")
class(HWD)
getwd
getwd()
setwd(walter/204_stats)
setwd("walter/204_stats"")
""
setwd("walter/204_stats")
getwd()
